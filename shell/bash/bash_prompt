#!/bin/bash

# bash_prompt

# Example:
# nicolas@host: ~/.dotfiles on master [+!?$]
# $
# Screenshot: http://i.imgur.com/DSJ1G.png
# iTerm2 prefs: import Solarized theme (disable bright colors for bold text)
# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html
prompt_git() {
    local s=""
    local branchName=""

	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

		if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
			git update-index --really-refresh -q &> /dev/null;
		fi;

			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$';
			fi;

        fi

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

set_prompts() {
    local black=""
    local blue=""
    local bold=""
    local cyan=""
    local green=""
    local orange=""
    local purple=""
    local red=""
    local reset=""
    local white=""
    local yellow=""

    local hostStyle=""
    local userStyle=""
	cloud=""
	if [[ -f /proc/cpuinfo ]] && grep -q "^flags.* hypervisor" /proc/cpuinfo && [[ ! -d "/mnt/c/Windows/" ]]; then
		cloud="☁️ "
	fi
    #if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    if tput setaf 1 &> /dev/null; then
        tput sgr0 # reset colors

        bold=$(tput bold)
        reset=$(tput sgr0)

        # Solarized colors
        # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
        black=$(tput setaf 0)
        blue=$(tput setaf 33)
        cyan=$(tput setaf 37)
        green=$(tput setaf 64)
        orange=$(tput setaf 166)
        purple=$(tput setaf 125)
        red=$(tput setaf 124)
	violet=$(tput setaf 61);
        white=$(tput setaf 15)
        yellow=$(tput setaf 136)
    else
        bold=""
	reset="\\e[0m";
	# shellcheck disable=SC2034
	black="\\e[1;30m";
	blue="\\e[1;34m";
	cyan="\\e[1;36m";
	green="\\e[1;32m";
	# shellcheck disable=SC2034
	orange="\\e[1;33m";
	# shellcheck disable=SC2034
	purple="\\e[1;35m";
	red="\\e[1;31m";
	violet="\\e[1;35m";
	white="\\e[1;37m";
	yellow="\\e[1;33m";
fi;

    # build the prompt
    # Highlight the user name when logged in as root.
    # logged in as root
    if [[ "$USER" == "root" ]]; then
        userStyle="\[$bold$red\]"
    else
        # userStyle="\[$orange\]"
        userStyle="${blue}";
    fi

    # connected via ssh
    # Highlight the hostname when connected via SSH.
    if [[ "$SSH_TTY" ]]; then
        #hostStyle="\[$bold$red\]"
        hostStyle="${bold}${cyan}";
    else
        #hostStyle="\[$yellow\]"
        hostStyle="${cyan}";
    fi

    # set the terminal title to the current working directory
    # PS1="\[\033]0;\w\007\]"

    # PS1+="\n" # newline
    # PS1+="\[$green\]\w" # working directory
    # PS1+="\$(prompt_git \"$reset on $white\")" # git repository details
    # PS1+="\n"
    # PS1+="\[$reset$white\]\$ \[$reset\]" # $ (and reset color)
    # Set the terminal title to the current working directory.
    PS1="\\[\\033]0;\\w\\007\\]";
    PS1+="\\[${bold}\\]\\n"; # newline
    PS1+="\\[${userStyle}\\]\\u"; # username
    PS1+="\\[${white}\\] at ";
    PS1+="\\[${hostStyle}\\]${cloud}\\h"; # host
    PS1+="\\[${white}\\] in ";
    PS1+="\\[${green}\\]\\w"; # working directory
    PS1+="\$(prompt_git \"${white} on ${violet}\")"; # Git repository details
    PS1+="\\n";
    PS1+="\\[${white}\\]\$ \\[${reset}\\]"; # `$` (and reset color)

    export PS1
}

#   Change Prompt
#   ------------------------------------------------------------
# export PS1="________________________________________________________________________________\n| \w @ \h (\u) \n| => "
# export PS2="| => "

set_prompts
unset set_prompts
PS2="\\[${yellow}\\]→ \\[${reset}\\]";
export PS2;
